// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package robot.subsystems;
//import robot.Robot;
//import java.lang.Math;
//import robot.commands.*;
//import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.command.Subsystem;
//import static org.junit.Assume.assumeTrue;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_VictorSPX;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Solenoid;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

//import robot.utils.*;
/**
 *
 */
public class ManipulatorSubSys extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private DigitalInput maniHatchDetector;
    private Solenoid hatchGrabberValve;
    private DigitalInput hatchGrabberClosedSw;
    private WPI_VictorSPX cargoMtr;
    private Solenoid selectorValve;
    private DigitalInput selector_Hatch_Pos_Sw;
    private DigitalInput maniCargoDetector;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    String line;

    // Grabber Constants
    public enum GrabberPos {OPEN, CLOSED};
    private GrabberPos grabberValve = GrabberPos.CLOSED;
    private static final boolean HATCHGRABBER_CLOSEDSW_TRUE = false;

    // Maipulator Selector Valve Constants
    public static enum ManipulatorPos {HATCH, CARGO};
    public ManipulatorPos manipulatorPos = ManipulatorPos.CARGO;   // default position  
    private static final boolean HATCH_SELECTED_SW_DETECT_TRUE = true;

    // cargo motor constants
    public static final double CARGOMTR_EJECTSPEED = 1.0;
    private static final double CARGOMTR_RETRACTSPEED = -0.8;
    //private static final double CARGOMTR_HOLDSPEED = 0.0;

    // Cargo state machine for proper holding
    private enum CargoMtrState {HOLDING, RETRACTING, STOPPED, EJECTING}
    private CargoMtrState cargoMtrState = CargoMtrState.STOPPED;

    private static final boolean CARGODETECT_TRUE = true;
    

    // Hatch detect limit switch constant
    private static final boolean HATCHDETECT_LMTSWTRUE = true;


    // Rfresh display on every 5 th. cycle ie) 100ms 10x/sec. 3 to stagger when each subsystem triggers
    private static double  displayCtr = 3;


    public ManipulatorSubSys() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        maniHatchDetector = new DigitalInput(12);
        addChild("ManiHatchDetector",maniHatchDetector);
        
        
        hatchGrabberValve = new Solenoid(0, 2);
        addChild("HatchGrabberValve",hatchGrabberValve);
        
        
        hatchGrabberClosedSw = new DigitalInput(19);
        addChild("HatchGrabberClosedSw",hatchGrabberClosedSw);
        
        
        cargoMtr = new WPI_VictorSPX(8);
        
        
        
        selectorValve = new Solenoid(0, 6);
        addChild("SelectorValve",selectorValve);
        
        
        selector_Hatch_Pos_Sw = new DigitalInput(11);
        addChild("Selector_Hatch_Pos_Sw",selector_Hatch_Pos_Sw);
        
        
        maniCargoDetector = new DigitalInput(18);
        addChild("ManiCargoDetector",maniCargoDetector);
        
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop
        if (grabberValve == GrabberPos.OPEN) {    hatchGrabberValve.set(true); }
        else                                 {    hatchGrabberValve.set(false); }

        if (manipulatorPos == ManipulatorPos.HATCH) { selectorValve.set(true); }
        else                                        { selectorValve.set(false); }
        
        // Retraction/Eject Motor States
        if      (cargoMtrState == CargoMtrState.STOPPED)    {cargoMtr.set(0);}
        else if (cargoMtrState == CargoMtrState.HOLDING)    {cargoMtr.set(0);}
        else if (cargoMtrState == CargoMtrState.RETRACTING) {cargoMtr.set(CARGOMTR_RETRACTSPEED);}   
        else if (cargoMtrState == CargoMtrState.EJECTING)   {cargoMtr.set(CARGOMTR_EJECTSPEED);}

        if ( displayCtr % 5 == 0) update_SmartDashboard();      // Update display every 100 ms
        displayCtr++;
    }

   // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    // ---------- Grabber Methods ----------------------
    public void setGrabber(GrabberPos pos) { grabberValve = pos; }
    public void setGrabberOpen()           { grabberValve = GrabberPos.OPEN; }
    public void setGrabberClosed()         { grabberValve = GrabberPos.CLOSED; }
    public GrabberPos getGrabberState()    { return grabberValve; }

    public boolean isGrabberClosed() {
        if (hatchGrabberClosedSw.get() == HATCHGRABBER_CLOSEDSW_TRUE)    { return true; } 
        else                                                             { return false; }
    }
    
    public boolean isGrabberOpen() {
        if (hatchGrabberClosedSw.get() != HATCHGRABBER_CLOSEDSW_TRUE)    { return true; } 
        else                                                             { return false; }
    }

    
    // ---------- Manipulator Position Valve Methods ----------------------
    public void setManiPosition(ManipulatorPos pos) { manipulatorPos = pos; }
    public void setManipulatorToHatchPos()          { manipulatorPos = ManipulatorPos.HATCH; }
    public void setManipulatorToCargoPos()          { manipulatorPos = ManipulatorPos.CARGO; }
    public ManipulatorPos getManipulatorPos()       { return manipulatorPos; }

    public boolean isHatchModeSelected(){
        if (manipulatorPos == ManipulatorPos.HATCH) return true;
        return false;
    }

    public boolean isSelector_In_Hatch_Position() { 
        if (selector_Hatch_Pos_Sw.get() == HATCH_SELECTED_SW_DETECT_TRUE) return true;
        return false;
    }

    // ------------------------- CHatch Detect in Manipulator Switch -------------------------------------------

    public boolean isHatchDetected() { 
        if (maniHatchDetector.get() == HATCHDETECT_LMTSWTRUE) return true;
        return false;
    }


    // ---------------Methods for cargo motor------------------
    public boolean isCargoDetected() {
        if (maniCargoDetector.get() == CARGODETECT_TRUE)
            return true;

        return false;
    }
    public void cargoMtrStop()       {
        System.out.println("Cargo Motor state changed to STOPPED !");
        cargoMtrState = CargoMtrState.STOPPED;}
    public void cargoMtrHold()       {
        System.out.println("Cargo Motor state changed to HOLDING !");
        cargoMtrState = CargoMtrState.HOLDING; }
    public void cargoMtrEject()      {
        System.out.println("Cargo Motor state changed to EJECTING !");
        cargoMtrState = CargoMtrState.EJECTING; }
    public void cargoMtrRetract()    {
        System.out.println("Cargo Motor state changed to RETRACTING !");
        cargoMtrState = CargoMtrState.RETRACTING;}
    

    
    private void update_SmartDashboard() {
        //if (isFlipMtrFwdLimitSwitchHit() == true)   SmartDashboard.putString("Mani_FlipFwdLmtSW", "Pressed");
        //else                                        SmartDashboard.putString("Mani_FlipFwdLmtSW", "NOT Pressed");
        //if (isFlipMtrRearLimitSwitchHit() == true)  SmartDashboard.putString("Mani_FlipRearLmtSW", "Pressed");
        //else                                        SmartDashboard.putString("Mani_FlipRearLmtSW", "NOT Pressed");
 
        if (isSelector_In_Hatch_Position() == true) SmartDashboard.putString("Mani_PositionSwitch", "Hatch Position");
        else                                        SmartDashboard.putString("Mani_PositionSwitch", "Cargo Position");

        if (isCargoDetected() == true)              SmartDashboard.putString("Mani_CargoSwitch", "Pressed");
        else                                        SmartDashboard.putString("Mani_CargoSwitch", "NOT Pressed");
        
        //if (isHatchDetected() == true)              SmartDashboard.putString("Mani_HatchDetected", "Detected");
        //else                                        SmartDashboard.putString("Mani_HatchDetected", "NOT Detected");

        if (isGrabberClosed() == true)              SmartDashboard.putString("Mani_HatchGrabberClosedSwitch", "Pressed");
        else                                        SmartDashboard.putString("Mani_HatchGrabberClosedSwitch", "NOT Pressed");

        if (isGrabberClosed() == true)                        SmartDashboard.putString("Grabber Valve", "Closed");
        else                                                SmartDashboard.putString("Grabber Valve", "Open");

        if (getManipulatorPos() == ManipulatorPos.HATCH)    SmartDashboard.putString("Manipulator Pos-Valve", "Hatch");
        else                                                SmartDashboard.putString("Manipulator Pos-Valve", "Cargo");

        if      (cargoMtrState == CargoMtrState.STOPPED)    SmartDashboard.putString("Mani_RollerState", "STOPPED");
        else if (cargoMtrState == CargoMtrState.HOLDING)    SmartDashboard.putString("Mani_RollerState", "HOLDING");
        else if (cargoMtrState == CargoMtrState.RETRACTING) SmartDashboard.putString("Mani_RollerState", "RETRACTING");
        else if (cargoMtrState == CargoMtrState.EJECTING)   SmartDashboard.putString("Mani_RollerState", "EJECTING");
        
        if (grabberValve == GrabberPos.OPEN)                SmartDashboard.putString("Grabber State", "Open");
        else                                                SmartDashboard.putString("Grabber State", "Closed");

     
    }
}
