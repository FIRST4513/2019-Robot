// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package robot.subsystems;


//import robot.commands.*;
//import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.command.Subsystem;
//import edu.wpi.first.wpilibj.PIDOutput;
//import edu.wpi.first.wpilibj.PIDSource;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_VictorSPX;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Solenoid;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class IntakeSubSys extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private DoubleSolenoid intakeLiftValve;
    private DigitalInput hatchSensor;
    private Solenoid intakeRollerLiftValve;
    private DigitalInput liftRaisedSw;
    private DigitalInput liftMidSw;
    private DigitalInput liftLoweredSw;
    private DigitalInput rollerLoweredSw;
    private DigitalInput rollerRaisedSw;
    private WPI_VictorSPX intakeRollerMtr;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // Intake motor constants
    private static final double INTAKEROLLER_RETRACTSPEED = 0.8;
    private static final double INTAKEROLLER_EJECTSPEED = -0.8;

    public enum RollerState {STOPPED, RETRACT, EJECT};
    private RollerState rollerState = RollerState.STOPPED;


    // Sensor constants
    private static final boolean HATCHSENSOR_TRUE = true;
    //private static final boolean CARGOHALFWAYDETECT1_TRUE = false;
    //private static final boolean CARGOHALFWAYDETECT2_TRUE = false;
    private static final boolean LIFT_RAISEDSW_TRUE = false;
    private static final boolean LIFT_MIDSW_TRUE = false;
    private static final boolean LIFT_LOWEREDSW_TRUE = false;
    private static final boolean LIFT_ROLLER_RAISED_TRUE = false;
    private static final boolean LIFT_ROLLER_LOWERED_TRUE = false;


    // Valve enums
    // Intake is now the Intake Roller Valve
    // Raised = Extended        Lowered = Retracted
    public enum IntakeValve {RAISED, LOWERED};
    //private IntakeValve liftValve = IntakeValve.RAISED;
    private IntakeValve liftValve = IntakeValve.LOWERED;    // changed this 4/4/19 to help it not extend

    private IntakeValve rollerValve = IntakeValve.LOWERED;

    private static double  displayCtr = 2;      // used to refresh display on every 5 th. cycle ie) 100ms 10x/sec.

    public IntakeSubSys() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        intakeLiftValve = new DoubleSolenoid(0, 0, 1);
        addChild("IntakeLiftValve",intakeLiftValve);
        
        
        hatchSensor = new DigitalInput(5);
        addChild("HatchSensor",hatchSensor);
        
        
        intakeRollerLiftValve = new Solenoid(0, 3);
        addChild("IntakeRollerLiftValve",intakeRollerLiftValve);
        
        
        liftRaisedSw = new DigitalInput(2);
        addChild("LiftRaisedSw",liftRaisedSw);
        
        
        liftMidSw = new DigitalInput(1);
        addChild("LiftMidSw",liftMidSw);
        
        
        liftLoweredSw = new DigitalInput(0);
        addChild("LiftLoweredSw",liftLoweredSw);
        
        
        rollerLoweredSw = new DigitalInput(3);
        addChild("RollerLoweredSw",rollerLoweredSw);
        
        
        rollerRaisedSw = new DigitalInput(4);
        addChild("RollerRaisedSw",rollerRaisedSw);
        
        
        intakeRollerMtr = new WPI_VictorSPX(4);
        
        
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        intakeRollerMtr.setSafetyEnabled(false);
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {

        if      (liftValveOnRaised())      { intakeLiftValve.set(DoubleSolenoid.Value.kForward);  }
        else                               { intakeLiftValve.set(DoubleSolenoid.Value.kReverse);  }

        //if      (rollerState == RollerState.RETRACT)    { intakeRollerMtr.set(INTAKEROLLER_RETRACTSPEED); }
        //else if (rollerState == RollerState.EJECT)      { intakeRollerMtr.set(INTAKEROLLER_EJECTSPEED); }
        //else                                            { intakeRollerMtr.set(0); }
    
        if ( displayCtr % 5 == 0) update_SmartDashboard();      // Update dsiplay every 100 ms
        displayCtr++;
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    // -------------------- Intake motor methods ---------------------------------------
    public void intakeMtrStop()     { rollerState = RollerState.STOPPED; }
    public void intakeMtrRetract()  { rollerState = RollerState.RETRACT; }
    public void intakeMtrEject()    { rollerState = RollerState.EJECT; }

    // -------------------- LiftValve Methods -------------
    public void liftValveSetRaised()    { liftValve = IntakeValve.RAISED; }
    public void liftValveSetLowered()   { liftValve = IntakeValve.LOWERED; }

    public boolean liftValveOnRaised() {
        if (liftValve == IntakeValve.RAISED) return true;
        return false;
    }

    public boolean liftValveOnLowered() {
        if (liftValve == IntakeValve.LOWERED) return true;
        return false;
    }

    public boolean isLiftRaisedPos(){
        if (liftRaisedSw.get() == LIFT_RAISEDSW_TRUE) return true;
        else                                    return false;
    }

    public boolean isLiftMidPos(){
        if (liftMidSw.get() == LIFT_MIDSW_TRUE) return true;
        else                                    return false;
    }

    public boolean isLiftLoweredPos(){
        if (liftLoweredSw.get() == LIFT_LOWEREDSW_TRUE) return true;
        else                                    return false;
    }


    // -------------------- Roller LiftValve Methods -------------
    public void rollerValveSetRaised() { rollerValve = IntakeValve.RAISED; }
    public void rollerValveSetLowered() { rollerValve = IntakeValve.LOWERED; }

    public boolean rollerValveStateAtTop() {
        if (rollerValve == IntakeValve.RAISED) return true;
        return false;
    }

    public boolean rollerValveStateAtBottom() {
        if (rollerValve == IntakeValve.LOWERED) return true;
        return false;
    }

    public boolean isRollerValveAtTop() {
        if (liftRaisedSw.get() == LIFT_ROLLER_RAISED_TRUE) return true;
        return false;
    }

    public boolean isRollerValveAtBottom() {
        if (liftLoweredSw.get() == LIFT_ROLLER_LOWERED_TRUE) return true;
        return false;
    }

    // -------------------- Roller Motor Methods -------------
    public void rollerMotorSetRetract() {
        intakeRollerMtr.set(INTAKEROLLER_RETRACTSPEED);
    }
    public void rollerMotorSetEject() {
        intakeRollerMtr.set(INTAKEROLLER_EJECTSPEED);
    }

    public void rollerMotorStop() {
        intakeRollerMtr.set(0);
    }

    // -------- Intake sensor methods ---------------
    public boolean isHatchDetected() { 
        if (hatchSensor.get() == HATCHSENSOR_TRUE) return true;
        return false;
    }

    public boolean isCargoHalfway1Detected() {
        //if (cargoHalfwayDetect1.get() == CARGOHALFWAYDETECT1_TRUE) return true;
        return false;
    }

    public boolean isCargoHalfway2Detected() {
        //if (cargoHalfwayDetect2.get() == CARGOHALFWAYDETECT2_TRUE) return true;
        return false;
    }
        
    private void update_SmartDashboard() {
        if (isHatchDetected() == true)          SmartDashboard.putString("Intake_HatchSensor", "Pressed"); 
        else                                    SmartDashboard.putString("Intake_HatchSensor", "Not Pressed");

        if (isCargoHalfway1Detected() == true)  SmartDashboard.putString("Intake_CargoHalfway1Sensor", "Pressed");
        else                                    SmartDashboard.putString("Intake_CargoHalfway1Sensor", "Not Pressed");

        if (isCargoHalfway2Detected() == true)  SmartDashboard.putString("Intake_CargoHalfway2Sensor", "Pressed");
        else                                    SmartDashboard.putString("Intake_CargoHalfway2Sensor", "Not Pressed");
        
        if (isLiftLoweredPos() == true)         SmartDashboard.putString("Intake_LiftLoweredSensor", "Pressed"); 
        else                                    SmartDashboard.putString("Intake_LiftLoweredSensor", "Not Pressed");

        if (isLiftMidPos() == true)             SmartDashboard.putString("Intake_LiftMidSensor", "Pressed"); 
        else                                    SmartDashboard.putString("Intake_LiftMidSensor", "Not Pressed");

        if (isLiftRaisedPos() == true)          SmartDashboard.putString("Intake_RaisedSensor", "Pressed"); 
        else                                    SmartDashboard.putString("Intake_RaisedSensor", "Not Pressed");


        if (liftValve == IntakeValve.RAISED)    SmartDashboard.putString("Intake_LiftValveState", "Raised");
        if (liftValve == IntakeValve.LOWERED)   SmartDashboard.putString("Intake_LiftValveState", "Lowered");

        if (rollerValve == IntakeValve.RAISED)  SmartDashboard.putString("Intake_RollerValveState", "Raised");
        if (rollerValve == IntakeValve.LOWERED) SmartDashboard.putString("Intake_RollerValveState", "Lowered");
        
        if (rollerState == RollerState.STOPPED)  SmartDashboard.putString("Intake_RollerState", "STOPPED");
        if (rollerState == RollerState.EJECT)    SmartDashboard.putString("Intake_RollerState", "EJECTING");
        if (rollerState == RollerState.RETRACT)  SmartDashboard.putString("Intake_RollerState", "RETRACTING");

        if ( isRollerValveAtTop() == true )      SmartDashboard.putString("Intake_RollerRaisedSw", "Tripped");
        else                                     SmartDashboard.putString("Intake_RollerRaisedSw", "NOT Tripped");

        if ( isRollerValveAtBottom() == true )   SmartDashboard.putString("Intake_RollerLoweredSw", "Tripped");
        else                                     SmartDashboard.putString("Intake_RollerLoweredSw", "NOT Tripped");
    }
}
