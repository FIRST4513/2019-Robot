// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package robot.commands;
import edu.wpi.first.wpilibj.command.Command;
import robot.Robot;

/**
 *
 */
public class Set_Robot_Pos_Cmd extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private String m_position;
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public Set_Robot_Pos_Cmd(String position) {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        m_position = position;

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
        if (m_position == "HatchFloor"){
            System.out.println("***** Goto Retreive HatchFloor CmdGrp Selected! ******");
            Robot.robotPosState = robot.Robot.RobotPosState.RETREIVE_HATCH_FLOOR;
        } else if (m_position == "HatchLS"){
            System.out.println("***** Goto Retreive  HatchLS CmdGrp Selected! ******");
            Robot.robotPosState = robot.Robot.RobotPosState.RETREIVE_HATCH_LS;
        } else if (m_position == "CargoFloor"){
            System.out.println("***** Goto Retreive  CargoFloor CmdGrp Selected! ******");
            Robot.robotPosState = robot.Robot.RobotPosState.RETREIVE_CARGO;

        } else if (m_position == "HatchHold"){
            System.out.println("***** Goto HatchHold CmdGrp Selected! ******");
            Robot.robotPosState = robot.Robot.RobotPosState.HATCH_HOLD;
        } else if (m_position == "CargoHold"){
            System.out.println("***** Goto CargoHold CmdGrp Selected! ******");
            Robot.robotPosState = robot.Robot.RobotPosState.CARGO_HOLD;

        } else if (m_position == "RetractHatchFloor"){
            System.out.println("***** RetractHatchFloor CmdGrp Selected! ******");
            Robot.robotPosState = robot.Robot.RobotPosState.CARGO_HOLD;
        } else if (m_position == "RetractCargoFloor"){
            System.out.println("***** RetractCargoFloor CmdGrp Selected! ******");
            Robot.robotPosState = robot.Robot.RobotPosState.CARGO_HOLD;



        } else if (m_position == "Eject_Main"){
            System.out.println("***** Goto Eject_Main CmdGrp Selected! ******");
            Robot.robotPosState = robot.Robot.RobotPosState.EJECT_MAIN;
        } else if (m_position == "Eject_Hatch_Fwd"){
            System.out.println("***** Goto Eject_Hatch_Fwd CmdGrp Selected! ******");
            Robot.robotPosState = robot.Robot.RobotPosState.EJECT_HATCH_FWD;
        } else if (m_position == "Eject_Rocket_Mid"){
            System.out.println("***** Goto Eject_Rocket_Mid CmdGrp Selected! ******");
            Robot.robotPosState = robot.Robot.RobotPosState.EJECT_ROCKET_MID;
        } else if (m_position == "Eject_Rocket_High"){
            System.out.println("***** Goto Eject_Rocket_High CmdGrp Selected! ******");
            Robot.robotPosState = robot.Robot.RobotPosState.EJECT_ROCKET_HIGH;

        } else {
            System.out.println("***** Goto OTHER CmdGrp Selected! ******");
            Robot.robotPosState = robot.Robot.RobotPosState.OTHER;
        }

    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return true;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    }
}
