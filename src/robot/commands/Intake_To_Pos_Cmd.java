// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package robot.commands;
import edu.wpi.first.wpilibj.command.Command;
import robot.Robot;
//import edu.wpi.first.wpilibj.Timer;

/**
 *
 */
public class Intake_To_Pos_Cmd extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private String m_position;
    private boolean m_waitMode;
    private double m_timeout;
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    private String line;


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public Intake_To_Pos_Cmd(String position, boolean waitMode, double timeout) {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        m_position = position;
        m_waitMode = waitMode;
        m_timeout = timeout;

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.intakeSubSys);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {

        // position: "Lowered", "Raised"
        line = "IntakeToPosCmd Called Position = "
            + m_position + " Timeout = " + m_timeout + " m_waitMode=" + m_waitMode;
        Robot.logger.appendLog(line);
        System.out.println(line);

        if        (m_position == "Lowered")     { Robot.intakeSubSys.liftValveSetLowered(); }
        else if   (m_position == "Raised")      { Robot.intakeSubSys.liftValveSetRaised();  }
        else if   (m_position == "Extended")    { Robot.intakeSubSys.liftValveSetRaised();  }
        else if   (m_position == "Retracted")   { Robot.intakeSubSys.liftValveSetLowered(); }
        else {
            line = "IntakeToPosCmd ERROR Bad Parameter";
            Robot.logger.appendLog(line);
            System.out.println(line);
        }
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
    }
    

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return true;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
        line = "IntakeToPosCmd Has Completed.";
        Robot.logger.appendLog(line);
        System.out.println(line);
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
        end();
    }
}
