// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package robot.commands;
import edu.wpi.first.wpilibj.command.Command;
import robot.Robot;
import robot.utils.Position;
import robot.utils.Map;

/**
 *
 */
public class GrabberOpenCloseCmd extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private String m_position;
    private double m_timeout;
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    private String line;
    private enum State { STOPPED, OPENING, CLOSING, DONE };
    private State state = State.STOPPED;
    //private static Map map;     // load map data

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public GrabberOpenCloseCmd(String position,double timeout) {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        m_position = position;
        m_timeout = timeout;

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {

                 // Position: "Open" "Close"

        // Logger information
        line = "GrabberOpenCloseCmd Called Position = "
            + m_position + " Timeout = " + m_timeout;
        //Robot.logger.appendLog(line);
        //System.out.println(line);

        setTimeout(m_timeout);
        state = State.STOPPED; // We're not currently moving

        if (m_position == "Open") {
            state = State.OPENING; 
            Robot.logger.appendLogPosition("Hatch gripper Opening (Release) - Position");
            return;
        } else if (m_position == "Close") {
            state = State.CLOSING;
            Robot.logger.appendLogPosition("Hatch gripper Closeing (Grab) - Position");
            return;
        } else {
            line = "GrabberOpenCloseCmd ERROR Bad Parameter";
            Robot.logger.appendLog(line);
            System.out.println(line);
            state = State.DONE;    
            return;
        }
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {

        if (state == State.OPENING) {
            state = State.DONE;
            Robot.manipulatorSubSys.setGrabberOpen();
        }

        if (state == State.CLOSING) {
            state = State.DONE;
            Robot.manipulatorSubSys.setGrabberClosed();
            recalibrateFieldPosition();
        }
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        if (state == State.DONE) return true;
        
        if (isTimedOut() == true) {
            // Tell the logger we've timed out
            line = "GrabberOpenCloseCmd Timed Out !!!!!";
            //Robot.logger.appendLog(line);
            //System.out.println(line);
            return true;
        }

        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
        line = "GrabberOpenCloseCmd Has Completed.";
        //Robot.logger.appendLog(line);
        //System.out.println(line);
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
        end();
    }

    private void recalibrateFieldPosition(){
        Position currPos = new Position();
        currPos.x = Robot.drivetrain.getPositionX();
        currPos.y = Robot.drivetrain.getPositionY();
        currPos.orientCW = Robot.drivetrain.getGyroYaw();
        Robot.logger.appendLogPosition("About to Reset Position at loading Station");
        if ( currPos.orientCW > 135 || currPos.orientCW < -135){
            Robot.logger.appendLogPosition("About to Reset Position at loading Station");
            // were pointing towards wall ie) loading station
            if (currPos.x < 0) {
                // were on left side of field
                currPos.x = Map.loadingSt_Tgt_X[0];                 // Left loading station position X
                currPos.y = Map.loadingSt_Tgt_Y[0];                 // Left loading station position Y
                Robot.drivetrain.setFieldPosition( currPos );       // Reset drivetrain current field position
            } else {
                // were on right side of field
                currPos.x = Map.loadingSt_Tgt_X[1];                 // Right loading station position X
                currPos.y = Map.loadingSt_Tgt_Y[1];                 // Right loading station position Y
                Robot.drivetrain.setFieldPosition( currPos );       // Reset drivetrain current field position
            }
            Robot.logger.appendLogPosition("Reseting Position at loading Station");
        }
    } 
}
