// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package robot.commands;
import edu.wpi.first.wpilibj.command.Command;
import robot.Robot;

/**
 *
 */
public class Intake_Roller_To_Pos_Cmd extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private String m_position;
    private double m_timeout;
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    private String line;
    private enum State { STOPPED, MOVING, DONE };
    private State state = State.STOPPED;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public Intake_Roller_To_Pos_Cmd(String position, double timeout) {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        m_position = position;
        m_timeout = timeout;

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {

        // position: "Lowered", "Raised", "Position"

        line = "IntakeRollerToPosCmd Called Position = "
            + m_position + " Timeout = " + m_timeout;
        Robot.logger.appendLog(line);
        System.out.println(line);
        setTimeout(m_timeout);
        state = State.STOPPED; // We're not currently moving
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
        if        (m_position == "Lowered")     { Robot.intakeSubSys.rollerValveSetLowered(); }
        else if   (m_position == "Raised")      { Robot.intakeSubSys.rollerValveSetRaised();  }
        else if   (m_position == "Extended")    { Robot.intakeSubSys.rollerValveSetRaised();  }
        else if   (m_position == "Retracted")   { Robot.intakeSubSys.rollerValveSetLowered(); }
        else {
            line = "IntakeRollerToPosCmd ERROR Bad Parameter";
            Robot.logger.appendLog(line);
        }
        state = State.DONE;
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        if (isTimedOut() == true) {
            // Tell the logger we've timed out
            line = "IntakeRollerToPosCmd Timed Out !!!!!";
            Robot.logger.appendLog(line);
            return true;
        }

        if (state == State.DONE) {
            return true;
        }

        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
        line = "IntakeRollerToPosCmd Has Completed.";
        Robot.logger.appendLog(line);
        System.out.println(line);
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
        end();
    }
}
