// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package robot.commands;
import edu.wpi.first.wpilibj.command.Command;
import robot.Robot;

/**
 *
 */
public class Cargo_Wait_For_Cargo_Halfway_Cmd extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    private String line;
    private enum State { STOPPED, RAISING, RAISED, LOWERING,LOWERED, DONE };
    private State state = State.STOPPED;


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public Cargo_Wait_For_Cargo_Halfway_Cmd() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
        line = "Cargo_Wait_For_Cargo_Halfway_Cmd Called";
        Robot.logger.appendLog(line);
        state = State.RAISING; // Wait till we raise to near the top
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
        if ( state == State.RAISING ) {
            if (Robot.intakeSubSys.isLiftMidPos() == true) {
                // Leading Edge of sensor detected while going up
                state = State.RAISED;
            } else {
                // continue waiting for leading edge
            }
        }

        // WE can remove the RAISED state if we are only wanting to trip on leading and trailing edge

        if (state == State.RAISED ) {
            if (Robot.intakeSubSys.isLiftMidPos() == false) {
                // TRAILING edge of sensor detected while going up
                state = State.LOWERING;
            } else {
                // continue waiting for the trailing edge
            }
        }

        if (state == State.LOWERING ) {
            if (Robot.intakeSubSys.isLiftMidPos() == true) {
                // LEADING edge of sensor detected while going back down
                state = State.LOWERED;
            } else {
                // continue waiting for the leading edge
            }
        }

        if ( state == State.LOWERED ) {
            if (Robot.intakeSubSys.isLiftMidPos() == false) {
                // TRAILING edge of sensor detected while going down
                state = State.DONE;
            } else {
                // continue waiting for the trailing edge
            }
        }

    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        //if (isTimedOut() == true) {
        //    line = "IntakeToPosCmd Timed Out !!!!!";
        //    Robot.logger.appendLog(line);
        //    return true;
        //}
        if (state == State.DONE) {
            return true;
        }

        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
        line = "Cargo_Wait_For_Cargo_Halfway_Cmd Has Completed.";
        Robot.logger.appendLog(line);
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
        end();
    }
}
