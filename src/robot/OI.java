// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package robot;

import robot.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.*;

import robot.utils.AxisButton;

//import robot.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton grabber_Open_Btn;
    public JoystickButton grabber_Close_Btn;
    public JoystickButton drive_By_Joystick_Btn;
    public JoystickButton intake_Retract_Btn;
    public JoystickButton intake_Extend_Btn;
    public JoystickButton lowGearManualBtn;
    public JoystickButton highGearManualBtn;
    public JoystickButton cargo_Eject_Btn;
    public JoystickButton cargo_Retract_Btn;
    public JoystickButton stop_Retract_Btn;
    public JoystickButton climbExtendButton;
    public JoystickButton climbRetractButton;
    public JoystickButton cameraBtn;
    public JoystickButton cameraABtn;
    public Joystick driverJoystick;
    public JoystickButton elev_By_Joystick_Btn;
    public JoystickButton goto_Main_Pos_Btn;
    public JoystickButton goto_Rocket_Mid_Pos_Btn;
    public JoystickButton goto_Rocket_High_Pos_Btn;
    public JoystickButton goto_Cargo_Retract_Floor_Btn;
    public JoystickButton goto_Cargo_Retract_LS_Btn;
    public JoystickButton mani_To_Hatch_Pos_Btn;
    public JoystickButton mani_To_Cargo_Pos_Btn;
    public JoystickButton goto_Top_Btn;
    public JoystickButton goto_Bottom_Btn;
    public JoystickButton goto_Cargoship_Pos_Btn;
    public JoystickButton cameraSnapshotBtn;
    public Joystick coPilotJoystick;
    public JoystickButton x_Stop_Cargo_Retract_Btn;
    public JoystickButton x_Cargo_Eject_Btn;
    public JoystickButton x_Climb_Extend_Btn;
    public JoystickButton x_Climb_Retract_Button;
    public JoystickButton x_GrabberLeft_Open_Btn;
    public JoystickButton x_GrabberLeft_Close_Btn;
    public JoystickButton x_Low_Gear_Manual_Btn;
    public JoystickButton x_GrabberRight_Close_Btn;
    public JoystickButton x_GrabberRight_Open_Btn;
    public JoystickButton xBox_High_Gear_Btn;
    public Joystick driverXboxCtlr;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    AxisButton xBox_Drive_Fwd_Btn;
    AxisButton xBox_Drive_Rev_Btn;
    AxisButton xBox_Drive_LTwist_Btn;
    AxisButton xBox_Drive_RTwist_Btn;
    
    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        driverXboxCtlr = new Joystick(2);
        
        xBox_High_Gear_Btn = new JoystickButton(driverXboxCtlr, 5);
        xBox_High_Gear_Btn.whileHeld(new Drivetrain_High_Gear_cmd());
        x_GrabberRight_Open_Btn = new JoystickButton(driverXboxCtlr, 8);
        x_GrabberRight_Open_Btn.whenPressed(new Grabber_Open_CmdGrp());
        x_GrabberRight_Close_Btn = new JoystickButton(driverXboxCtlr, 8);
        x_GrabberRight_Close_Btn.whenReleased(new Grabber_Close_CmdGrp());
        x_Low_Gear_Manual_Btn = new JoystickButton(driverXboxCtlr, 9);
        x_Low_Gear_Manual_Btn.whenPressed(new Drivetrain_Low_Gear_cmd());
        x_GrabberLeft_Close_Btn = new JoystickButton(driverXboxCtlr, 7);
        x_GrabberLeft_Close_Btn.whenReleased(new Grabber_Close_CmdGrp());
        x_GrabberLeft_Open_Btn = new JoystickButton(driverXboxCtlr, 7);
        x_GrabberLeft_Open_Btn.whenPressed(new Grabber_Open_CmdGrp());
        x_Climb_Retract_Button = new JoystickButton(driverXboxCtlr, 4);
        x_Climb_Retract_Button.whileHeld(new ClimbRetractCmd());
        x_Climb_Extend_Btn = new JoystickButton(driverXboxCtlr, 3);
        x_Climb_Extend_Btn.whileHeld(new ClimbExtendCmd());
        x_Cargo_Eject_Btn = new JoystickButton(driverXboxCtlr, 2);
        x_Cargo_Eject_Btn.whenPressed(new Cargo_Eject_CmdGrp());
        x_Stop_Cargo_Retract_Btn = new JoystickButton(driverXboxCtlr, 1);
        x_Stop_Cargo_Retract_Btn.whenPressed(new Cargo_Retract_Stop_CmdGrp());
        coPilotJoystick = new Joystick(1);
        
        cameraSnapshotBtn = new JoystickButton(coPilotJoystick, 2);
        cameraSnapshotBtn.whenPressed(new CameraSnapshotCmdGrp());
        goto_Cargoship_Pos_Btn = new JoystickButton(coPilotJoystick, 8);
        goto_Cargoship_Pos_Btn.whenPressed(new Goto_Cargoship_Pos_CmdGrp());
        goto_Bottom_Btn = new JoystickButton(coPilotJoystick, 5);
        goto_Bottom_Btn.whenPressed(new Goto_Bottom_Pos_CmdGrp());
        goto_Top_Btn = new JoystickButton(coPilotJoystick, 6);
        goto_Top_Btn.whenPressed(new Goto_Top_Pos_CmdGrp());
        mani_To_Cargo_Pos_Btn = new JoystickButton(coPilotJoystick, 4);
        mani_To_Cargo_Pos_Btn.whenPressed(new Mani_SelectorValve_Set_Cmd("Cargo"));
        mani_To_Hatch_Pos_Btn = new JoystickButton(coPilotJoystick, 3);
        mani_To_Hatch_Pos_Btn.whenPressed(new Mani_SelectorValve_Set_Cmd("Hatch"));
        goto_Cargo_Retract_LS_Btn = new JoystickButton(coPilotJoystick, 10);
        goto_Cargo_Retract_LS_Btn.whenPressed(new Goto_Retreive_Cargo_LS_Pos_CmdGrp());
        goto_Cargo_Retract_Floor_Btn = new JoystickButton(coPilotJoystick, 12);
        goto_Cargo_Retract_Floor_Btn.whenPressed(new Goto_Retreive_Cargo_Floor_Pos_CmdGrp());
        goto_Rocket_High_Pos_Btn = new JoystickButton(coPilotJoystick, 7);
        goto_Rocket_High_Pos_Btn.whenPressed(new Goto_Eject_RocketHIGH_Pos_CmdGrp());
        goto_Rocket_Mid_Pos_Btn = new JoystickButton(coPilotJoystick, 9);
        goto_Rocket_Mid_Pos_Btn.whenReleased(new Goto_Eject_RocketMID_Pos_CmdGrp());
        goto_Main_Pos_Btn = new JoystickButton(coPilotJoystick, 11);
        goto_Main_Pos_Btn.whenPressed(new Goto_Eject_Main_Pos_CmdGrp());
        elev_By_Joystick_Btn = new JoystickButton(coPilotJoystick, 1);
        elev_By_Joystick_Btn.whileHeld(new ElevByJoystickCmd());
        driverJoystick = new Joystick(0);
        
        cameraABtn = new JoystickButton(driverJoystick, 11);
        cameraABtn.whenReleased(new cameraACmdGrp());
        cameraBtn = new JoystickButton(driverJoystick, 11);
        cameraBtn.whenPressed(new cameraBCmdGrp());
        climbRetractButton = new JoystickButton(driverJoystick, 6);
        climbRetractButton.whileHeld(new ClimbRetractCmd());
        climbExtendButton = new JoystickButton(driverJoystick, 4);
        climbExtendButton.whileHeld(new ClimbExtendCmd());
        stop_Retract_Btn = new JoystickButton(driverJoystick, 12);
        stop_Retract_Btn.whenPressed(new Cargo_Retract_Stop_CmdGrp());
        cargo_Retract_Btn = new JoystickButton(driverJoystick, 5);
        cargo_Retract_Btn.whenPressed(new Cargo_Capture_CmdGrp());
        cargo_Eject_Btn = new JoystickButton(driverJoystick, 2);
        cargo_Eject_Btn.whenPressed(new Cargo_Eject_CmdGrp());
        highGearManualBtn = new JoystickButton(driverJoystick, 8);
        highGearManualBtn.whenPressed(new Drivetrain_High_Gear_cmd());
        lowGearManualBtn = new JoystickButton(driverJoystick, 7);
        lowGearManualBtn.whenPressed(new Drivetrain_Low_Gear_cmd());
        intake_Extend_Btn = new JoystickButton(driverJoystick, 10);
        intake_Extend_Btn.whenPressed(new Intake_Roller_Extend_CmdGrp());
        intake_Retract_Btn = new JoystickButton(driverJoystick, 9);
        intake_Retract_Btn.whenPressed(new Intake_Roller_Retract_CmdGrp());
        drive_By_Joystick_Btn = new JoystickButton(driverJoystick, 1);
        drive_By_Joystick_Btn.whileHeld(new driveByJoystickCmd());
        grabber_Close_Btn = new JoystickButton(driverJoystick, 3);
        grabber_Close_Btn.whenReleased(new Grabber_Close_CmdGrp());
        grabber_Open_Btn = new JoystickButton(driverJoystick, 3);
        grabber_Open_Btn.whileHeld(new Grabber_Open_CmdGrp());


        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("cameraACmdGrp", new cameraACmdGrp());
        SmartDashboard.putData("cameraBCmdGrp", new cameraBCmdGrp());
        SmartDashboard.putData("Cargo_Wait_For_Cargo_Halfway_Cmd", new Cargo_Wait_For_Cargo_Halfway_Cmd());
        SmartDashboard.putData("compressorStartCmd", new compressorStartCmd());
        SmartDashboard.putData("compressorStoptCmd", new compressorStoptCmd());
        SmartDashboard.putData("HudOffCmd", new HudOffCmd());
        SmartDashboard.putData("HudOnCmd", new HudOnCmd());
        SmartDashboard.putData("LoggerWriteCmd", new LoggerWriteCmd());
        SmartDashboard.putData("UDPServerStartCmd", new UDPServerStartCmd());
        SmartDashboard.putData("UDPServerStopCmd", new UDPServerStopCmd());
        SmartDashboard.putData("ResetGyroCmd", new ResetGyroCmd());
        SmartDashboard.putData("ResetEncodersCmd", new ResetEncodersCmd());
        SmartDashboard.putData("ResetPositionCmd", new ResetPositionCmd());
        SmartDashboard.putData("TestFwd2CmdGrp", new TestFwd2CmdGrp());
        SmartDashboard.putData("TestArcTurnCmdGrp", new TestArcTurnCmdGrp());
        SmartDashboard.putData("TestPIDPtTurnCmdGrp", new TestPIDPtTurnCmdGrp());
        SmartDashboard.putData("TestPIDFwdCmdGrp", new TestPIDFwdCmdGrp());
        SmartDashboard.putData("TestPositionCmd", new TestPositionCmd());
        SmartDashboard.putData("Test_Intake_LiftValve_Cmd", new Test_Intake_LiftValve_Cmd());
        SmartDashboard.putData("Test_Intake_RollerLiftValve_Cmd", new Test_Intake_RollerLiftValve_Cmd());
        SmartDashboard.putData("Test_ElevValve_Cmd", new Test_ElevValve_Cmd());
        SmartDashboard.putData("Test_Intake_RollerMtr_Cmd", new Test_Intake_RollerMtr_Cmd());
        SmartDashboard.putData("Test_GrabberValve_Cmd", new Test_GrabberValve_Cmd());
        SmartDashboard.putData("Test_Mani_RollerMtr_Cmd", new Test_Mani_RollerMtr_Cmd());
        SmartDashboard.putData("Test_Intake_Lift_Lower_CmdGrp", new Test_Intake_Lift_Lower_CmdGrp());
        SmartDashboard.putData("Manual_Intake_Raise_CmdGrp", new Manual_Intake_Raise_CmdGrp());
        SmartDashboard.putData("Manual_Intake_Lower_CmdGrp", new Manual_Intake_Lower_CmdGrp());
        SmartDashboard.putData("Manual_Intake_Roller_Raise_CmdGrp", new Manual_Intake_Roller_Raise_CmdGrp());
        SmartDashboard.putData("Manual_Intake_Roller_Lower_CmdGrp", new Manual_Intake_Roller_Lower_CmdGrp());
        SmartDashboard.putData("Goto_Bottom_Pos_CmdGrp", new Goto_Bottom_Pos_CmdGrp());
        SmartDashboard.putData("CameraFlipHorizCmdGrp", new CameraFlipHorizCmdGrp());
        SmartDashboard.putData("CameraSnapshotCmdGrp", new CameraSnapshotCmdGrp());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    

    xBox_Drive_Fwd_Btn = new AxisButton(driverXboxCtlr, 0.02, 3);
    xBox_Drive_Fwd_Btn.whenPressed(new driveByJoystickCmd());
    xBox_Drive_Fwd_Btn.whenPressed(new cameraACmdGrp());

    xBox_Drive_Rev_Btn = new AxisButton(driverXboxCtlr, 0.02, 2);
    xBox_Drive_Rev_Btn.whenPressed(new driveByJoystickCmd());
    //xBox_Drive_Rev_Btn.whenPressed(new cameraBCmdGrp());

    xBox_Drive_RTwist_Btn = new AxisButton(driverXboxCtlr, 0.1, 4);
    xBox_Drive_RTwist_Btn.whenPressed(new driveByJoystickCmd());
    xBox_Drive_RTwist_Btn.whenPressed(new cameraACmdGrp());

    xBox_Drive_LTwist_Btn = new AxisButton(driverXboxCtlr, 0.1, 0);
    xBox_Drive_LTwist_Btn.whenPressed(new driveByJoystickCmd());
    xBox_Drive_LTwist_Btn.whenPressed(new cameraACmdGrp());
    // Pauls test command 
    SmartDashboard.putData("CmdGrpDualPidToXY", new CmdGrpDualPidGotoCoord(2, 0, 0, 0, 90, Double.NaN));

    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getdriverJoystick() {
        return driverJoystick;
    }

    public Joystick getCoPilotJoystick() {
        return coPilotJoystick;
    }

    public Joystick getDriverXboxCtlr() {
        return driverXboxCtlr;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}
